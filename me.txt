                                Installation & Project Setup

Initial Project Setup
    Tạm thời tắt phần mềm diệt virut và cài đặt project laravel
        composer create-project --prefer-dist laravel/laravel laravel_vuejs
        Để vào được trang web của dự án thì cần truy cập vào trong folder public, để có thể xóa
        được public trên link url thì có thể dùng virtual host
        <VirtualHost *:80>
            ServerAdmin laravel_vuejs.xyz
            DocumentRoot "C:/xampp/htdocs/laravel_vuejs/public"
            ServerName laravel_vuejs.xyz
            ErrorLog "logs/laravel_vuejs.xyz-error.log"
            CustomLog "logs/laravel_vuejs.xyz-access.log" common
        </VirtualHost>
    - Remove public trên URL
    C:\Windows\System32\drivers\etc -----------> hosts
        127.0.0.1       laravel_vuejs.xyz
    php artisan ui vue --auth
    npm install vue-router
Laravel Routing & Vue Routing
    npm install
    npm run watch
        npm run watchコマンドはターミナルで実行し続け、関連ファイル全部の変更を監視します。Webpackは変更を感知すると、
        アセットを自動的に再コンパイルします。

laravel_vuejs\resources\js\bootstrap.js do khong dung bootstrap nen bo di phan noi dung:
    try {
        window.Popper = require('popper.js').default;
        window.$ = window.jQuery = require('jquery');

        require('bootstrap');
    } catch (e) {}

==============================================================================================================

                                About API Development

API Setup & Basic Contacts Test
    UnitTest, FeatureTest
        https://viblo.asia/p/co-ban-ve-unittest-trong-laravel-gDVK29Mj5Lj
        https://viblo.asia/p/feature-test-trong-laravel-GrLZD8wwZk0
        https://qiita.com/franz/items/77a47b009b07997ce39c
        https://readouble.com/laravel/5.dev/ja/testing.html
        Actions Handled By Resource Controller:
            https://laravel.com/docs/7.x/controllers
        https://morioh.com/p/iCPNGt7eTMVl
        https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#Client_error_responses
        https://viblo.asia/p/policy-trong-laravel-WAyK80YkKxX
        https://viblo.asia/p/laravel-resource-api-maGK740BZj2
    cấu hình cho PHPUnit
        phpunit.xml
    Run test:
        vendor/bin/phpunit
    Tạo alias cho câu lệnh hay dùng
        alias pu='clear && vendor/bin/phpunit'
    Tạo 1 test trong thư mục Feature
        php artisan make:test ContactsTest
    Nếu muốn Tạo 1 test trong thư mục Unit
        php artisan make:test UserTest --unit
    Class phải có hậu tố tương ứng với thuộc tính suffix trong file phpunit.xml, mặc định là Test => Nếu không
        phpunit sẽ bỏ qua k test class này.
    Extends class Tests/TestCase.
    Tên function sử dụng tiền tố là test và nên mô tả rõ công việc của nó. Nếu không muốn sử dụng chữ test thì hãy sử
        dụng annotation @test trước mỗi function.
        /** @test */
    test single method:
        clear && vendor/bin/phpunit --filter a_contact_can_be_added
    Tạo Model và migration
        php artisan make:model Contact -m
    Câu lệnh tạo migration riêng: php artisan make:migration CreateContactsTable
    Controller
        php artisan make:controller ContactsController
    <!-- Run tất cả tests: -->
    ./vendor/bin/phpunit
    <!-- Run theo testsuite -->
    ./vendor/bin/phpunit --testsuite Unit
    <!-- Run từng file: -->
    ./vendor/bin/phpunit tests/Unit/ExampleTest.php
    <!-- Format output: -->
    ./vendor/bin/phpunit --testdox
Basic Validation
    Tạo alias cho câu lệnh hay dùng
        alias pf='clear && vendor/bin/phpunit --filter'
    Test method a_name_is_required
        pf a_name_is_required
        <=>clear && vendor/bin/phpunit --filter a_name_is_required
    assertCount($count, $array): 配列$arrayの値の数が$countである
    Test không có contact nào được thêm vào database
        $this->assertCount(0, Contact::all());
    $response = $this->post('/api/contacts', [
        'email' => 'test@email.com',
        'birthday' => '05/14/1988',
        'company' => 'ABC String',
    ]);
    $response->assertSessionHasErrors('name');
        指定されたキーのエラーがセッションに存在するかアサートする
    pf email_is_required
Test Cleanup & Refactor
Email & Date Fields
Fetching a Single Contact
    php artisan make:factory ContactFactory -m Contact
    assertJsonメソッドはレスポンスを配列へ変換
Patching a Contact
    patch/put đều dùng để edit
Deleting a Contact

==============================================================================================================

                                Refining The API

API Tokens
    setUp(): Chạy trước mỗi method test. Sử dụng khi muốn khởi tạo biến, mở kết nối file,... chuẩn bị môi trường để test
        これは、このテストクラスの各メソッドの開始前に必ず呼ばれるメソッドです。
    tearDown(): Chạy sau mỗi method test. Sử dụng để hủy các biến, kết nối,...
        これは、このテストクラスの各メソッドの終了後に必ず呼ばれるメソッドです。
    setUpBeforeClass(): Chạy khi bắt đầu class test
    tearDownAfterClass(): Chạy sau khi kết thúc class test
    Test toàn bộ nội dung trong class
        clear && vendor/bin/phpunit --filter ContactsTest
    assertRedirect()
        クライアントが指定したURIへリダイレクトすることをアサート。
Contacts Belong to Users
    assertJsonCount
        レスポンスJSONが、指定したキーのアイテムを、期待値分持っていることを宣言。
        $response->assertJsonCount($count, $key = null);
Fixing Broken Tests 1
    http response status codes
        https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
    Client error responses
        404 Not Found
            url sai
        403 Forbidden
        401 Unauthorized
            Khi chưa login
Fixing Broken Tests 2
    Dựa trên mối quan hệ user hasMany contact nên user_id sẽ được thêm vào khi tạo 1 contact mới
        request()->user()->contacts()->create($this->validateData())
Refactoring to a Contact Policy
    https://laravel.com/docs/5.7/authorization#creating-policies
    php artisan make:policy PostPolicy
    php artisan help make:policy
    php artisan make:policy PostPolicy --model=Post
    php artisan make:policy ContactPolicy -m Contact
        if(request()->user()->isNot($contact->user)) {
            return response([], 403);
        }
        <=> $this->authorize('view', $contact);
    https://viblo.asia/p/policy-trong-laravel-WAyK80YkKxX
Refactoring to a Contact Resource
    assertInstanceOf($class, $instance)
        $instanceがクラス名$classのインスタンスである
    php artisan make:resource Contact
    dd($response->getContent())
    dd(json_decode($response->getContent()))
    'last_updated' => $contact->updated_at->diffForHumans(),
HTTP Responses 1
    https://viblo.asia/p/laravel-resource-api-maGK740BZj2
    assertStatus(200)
        assertStatusメソッドは返されたレスポンスが指定したHTTPステータスコードを持っていることをアサートします
    setStatusCode
HTTP Responses 2

==============================================================================================================

                            User Authentication & Login View Design
Tailwindcss Setup
    https://tailwindcss.com/
    1.Install Tailwind via npm
        npm install tailwindcss
    2.Add Tailwind to your CSS
        laravel_vuejs\resources\sass
            @tailwind base;
            @tailwind components;
            @tailwind utilities;
    3.Create your Tailwind config file
        npx tailwindcss init
    4.Process your CSS with Tailwind
        Laravel Mix
    npm run watch
    laravel_vuejs\node_modules\tailwindcss\dist\tailwind.css
    -> laravel_vuejs\public\css\app.css
Login View 1
Login View 2
Login View 3
MySQL Setup & User Registration
    (mysql -u root
    CREATE DATABASE jot)
    php artisan migrate
    // セッションをクリア＆セッションIDを再発行(Illuminate\Session\Store::invalidate)
    session()->invalidate();
App Design 1
App Design 2
App Design 3

==============================================================================================================

                                    Views for Contacts
Create Contacts Design
Reusable Input Vue Component
Submitting the Form
Handling Validation Errors
Fetching a Single Contact
    Phương thức created() luôn được thực hiện sớm hơn mounted()
    App Component: created()
    Child Component: mounted()
Show View Design
User Circle Component
Redirecting After Create
Deleting a Contact
Update a Contact
    watch, computed
    https://www.e-loop.jp/knowledges/2/
    computedプロパティに比べて記述が冗長だが、非同期や複雑な処理などwatchプロパティでしか実現できないものがある。
        watch: {
            data: {
                immediate: true,
                handler: function (val) {
                    this.value = val;
                }
            }
        }
